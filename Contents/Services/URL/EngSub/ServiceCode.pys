########################################################################################
def NormalizeURL(url):

	return url

########################################################################################
def MetadataObjectForURL(url):

	page = HTML.ElementFromURL(url)
	title = page.xpath("//meta[@property='og:title']/@content")[0]
	description = page.xpath("//meta[@property='og:description']/@content")[0]
	thumb = page.xpath("//div[@class='poster']/img/@src")[0]
	return VideoClipObject(
		title = title,
		summary = description,
		thumb = thumb
	)

########################################################################################
def MediaObjectsForURL(url):

	return [
        	MediaObject(
			parts = [
				PartObject(
					key = 
						Callback(
							PlayVideo,
							url = url,
							fmt = 'hi',
							post_url=url
						)
					)
				],
			video_resolution = 720,
			bitrate = 3000,
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
			)
	]

########################################################################################
@indirect
def PlayVideo(url, fmt):
	
	page = HTML.ElementFromURL(url)
	videolink = page.xpath("//a[@class='btn-watch']/@href")[0]
	html = HTTP.Request(videolink, cacheTime = CACHE_1MONTH).content
	video_url = Regex('file:\s"([^"]+)"').search(html).groups()[0]

	return IndirectResponse(VideoClipObject, key=video_url)
